// <auto-generated> This file has been auto generated by EF Core Power Tools. </auto-generated>
#nullable disable
using System;
using System.Collections.Generic;
using Microsoft.EntityFrameworkCore;

namespace PostagensApi.Models;

public partial class db_SocialContext : DbContext
{
    public db_SocialContext(DbContextOptions<db_SocialContext> options)
        : base(options)
    {
    }

    public virtual DbSet<Comment> Comments { get; set; }

    public virtual DbSet<Like> Likes { get; set; }

    public virtual DbSet<Post> Posts { get; set; }

    public virtual DbSet<User> Users { get; set; }

    protected override void OnModelCreating(ModelBuilder modelBuilder)
    {
        modelBuilder.Entity<Comment>(entity =>
        {
            entity.Property(e => e.Comment1)
                .IsRequired()
                .HasMaxLength(200)
                .IsFixedLength()
                .HasColumnName("Comment");

            entity.HasOne(d => d.Post).WithMany(p => p.Comments)
                .HasForeignKey(d => d.PostId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_Comments_Post");

            entity.HasOne(d => d.User).WithMany(p => p.Comments)
                .HasForeignKey(d => d.UserId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_Comments_User");
        });

        modelBuilder.Entity<Like>(entity =>
        {
            entity.HasIndex(e => e.IdPost, "IX_Likes_IdPost");

            entity.HasIndex(e => e.IdUsuario, "IX_Likes_IdUsuario");

            entity.HasOne(d => d.IdPostNavigation).WithMany(p => p.Likes).HasForeignKey(d => d.IdPost);

            entity.HasOne(d => d.IdUsuarioNavigation).WithMany(p => p.Likes)
                .HasForeignKey(d => d.IdUsuario)
                .OnDelete(DeleteBehavior.ClientSetNull);
        });

        modelBuilder.Entity<Post>(entity =>
        {
            entity.ToTable("Post");

            entity.HasIndex(e => e.UserId, "IX_Post_AuthorId");

            entity.Property(e => e.Title)
                .IsRequired()
                .HasDefaultValueSql("(N'')");

            entity.HasOne(d => d.User).WithMany(p => p.Posts)
                .HasForeignKey(d => d.UserId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_Post_User_AuthorId");
        });

        modelBuilder.Entity<User>(entity =>
        {
            entity.ToTable("User");

            entity.Property(e => e.Email)
                .IsRequired()
                .HasDefaultValueSql("(N'')");
            entity.Property(e => e.Name)
                .IsRequired()
                .HasDefaultValueSql("(N'')");
            entity.Property(e => e.Password)
                .IsRequired()
                .HasDefaultValueSql("(N'')");
            entity.Property(e => e.Role)
                .IsRequired()
                .HasDefaultValueSql("(N'')");
        });

        OnModelCreatingPartial(modelBuilder);
    }

    partial void OnModelCreatingPartial(ModelBuilder modelBuilder);
}